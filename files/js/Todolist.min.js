/**
 * This is the core class for the todolist extending the wcf-own core class.
 *
 * @author  Julian Pfeil <https://julian-pfeil.de>
 * @copyright   2022 Julian Pfeil Websites & Co.
 * @license Creative Commons <by> <https://creativecommons.org/licenses/by/4.0/legalcode>
 * @package Todolist/Core
 */

console.log('test');

/**
 * Initialize Todolist namespaces
 */
 var Todolist = { };
 Todolist.Todo = { };

/**
 * Inline editor for todos.
 */
 Todolist.Todo.InlineEditor = WCF.InlineEditor.extend({
	/**
	 * current editor environment
	 */
	_environment: 'todo',
	
	/**
	 * list of permissions
	 */
	_permissions: {},
	
	/**
	 * redirect URL
	 */
	_redirectURL: '',
	
	/**
	 * todo update handler
	 */
	_updateHandler: null,
	
	/**
	 * @see WCF.InlineEditor._setOptions()
	 */
	_setOptions: function () {
		this._environment = 'todo';
		
		this._options = [
			// edit
			{
				label: WCF.Language.get('wcf.global.button.edit'),
				optionName: 'edit',
				isQuickOption: true
			},

            // delete
			{
                label: WCF.Language.get('wcf.global.button.delete'), 
                optionName: 'delete'
            },
			
			// divider
			{optionName: 'divider'},
			
			// markAsDone
			{
				label: WCF.Language.get('todolist.action.markAsDone'),
				optionName: 'markAsDone'
			},
			{
				label: WCF.Language.get('todolist.action.markAsUndone'),
				optionName: 'markAsUndone'
			}
		];
	},
	
	/**
	 * Returns current update handler.
	 */
	setUpdateHandler: function (updateHandler) {
		this._updateHandler = updateHandler;
	},
	
	/**
	 * @see WCF.InlineEditor._getTriggerElement()
	 */
	_getTriggerElement: function (element) {
		return element.find('.jstodoInlineEditor');
	},
	
	/**
	 * @see WCF.InlineEditor._show()
	 */
	_show: function (event) {
		var $elementID = $(event.currentTarget).data('elementID');
		
		// build dropdown
		var $trigger = null;
		if (!this._dropdowns[$elementID]) {
			$trigger = this._getTriggerElement(this._elements[$elementID]).addClass('dropdownToggle');
			$trigger.parent().addClass('dropdown');
			this._dropdowns[$elementID] = $('<ul class="dropdownMenu" />').insertAfter($trigger);
		}
		
		this._super(event);
		
		if ($trigger !== null) {
			WCF.Dropdown.initDropdown($trigger, true);
		}
		
		return false;
	},
	
	/**
	 * @see WCF.InlineEditor._validate()
	 */
	_validate: function (elementID, optionName) {
		var $todoID = $('#' + elementID).data('todoID');
		
		switch (optionName) {
			// delete
			case 'delete':
				if (!this._getPermission('canDeleteTodo')) {
					return false;
				}
				
				return true;
				break;
			// markAsDone
			case 'markAsDone':
				if (!this._getPermission('canMarkAsDone')) {
					return false;
				}
				
				return !(this._updateHandler.getValue($todoID, 'isDone'));
				break;
			case 'markAsUndone':
				if (!this._getPermission('canMarkAsDone')) {
					return false;
				}
				
				return (this._updateHandler.getValue($todoID, 'isDone'));
				break;
				
			// edit
			case 'edit':
				return true;
				break;
		}
		
		return false;
	},
	
	/**
	 * @see WCF.InlineEditor._execute()
	 */
	_execute: function (elementID, optionName) {
		// abort if option is invalid or not accessible
		if (!this._validate(elementID, optionName)) {
			return false;
		}
		
		switch (optionName) {
			case 'delete':
				var self = this;
				WCF.System.Confirmation.show(WCF.Language.get('todolist.action.confirmDelete'), function (action) {
					if (action === 'confirm') {
						self._updatetodo(elementID, optionName, {deleted: 1});
					}
				});
				break;
			case 'markAsDone':
			case 'markAsUndone':
				this._updatetodo(elementID, optionName, {isDone: (optionName === 'markAsDone' ? 1 : 0)});
				break;
				
			case 'edit':
				window.location = this._getTriggerElement($('#' + elementID)).prop('href');
				break;
				
			default:
				return false;
				break;
		}
		
		return true;
	},
	
	/**
	 * Updates todo properties.
	 */
	_updatetodo: function (elementID, optionName, data) {
		if (optionName === 'delete') {
			var self = this;
			var $todoID = this._elements[elementID].data('todoID');
			
			new WCF.Action.Proxy({
				autoSend: true,
				data: {
					actionName:	optionName,
					className: 	'todolist\\data\\todo\\TodoAction',
					objectIDs:	[$todoID]
				},
				success: function (data) {
					self._updateHandler.update($todoID, data.returnValues.todoData[$todoID]);
				}
			});
		}
		else {
			this._updateData.push({
				data: 		data,
				elementID:	elementID,
				optionName:	optionName
			});
			
			this._proxy.setOption('data', {
				actionName:	optionName,
				className:	'todolist\\data\\todo\\TodoAction',
				objectIDs:	[this._elements[elementID].data('todoID')],
				parameters:	{
					data: data
				}
			});
			this._proxy.sendRequest();
		}
	},
	
	/**
	 * @see WCF.InlineEditor._updateState()
	 */
	_updateState: function(requestData) {
		
		// user feedback
		this._notification.show();
		
		// update
		for (var $i = 0, $length = this._updateData.length; $i < $length; $i++) {
			var data = this._updateData[$i];
			var todoID = $('#' + data.elementID).data('todoID');
			var updateData = data.data;
			
			this._updateHandler.update(todoID, updateData);
		}
	},
	
	/**
	 * Returns a specific permission.
	 */
	_getPermission: function (permission) {
		if (this._permissions[permission]) {
			return this._permissions[permission];
		}
		
		return 0;
	},
	
	/**
	 * Sets current redirect URL.
	 */
	setRedirectURL: function (redirectURL) {
		this._redirectURL = redirectURL;
	},
	
	/**
	 * Sets a permission.
	 */
	setPermission: function (permission, value) {
		this._permissions[permission] = value;
	},
	
	/**
	 * Sets permissions.
	 */
	setPermissions: function (permissions) {
		for (var $permission in permissions) {
			this.setPermission($permission, permissions[$permission]);
		}
	}
});

Todolist.Todo.UpdateHandler = Class.extend({
	/**
	 * todo list
	 */
	_todos: {},
	
	/**
	 * Initializes the todo update handler.
	 */
	init: function () {
		var self = this;
		$('.todoHeader').each(function (index, todo) {
			var $todo = $(todo);
			
			self._todos[$todo.data('objectID')] = $todo;
		});
	},
	
	/**
	 * Updates a set of properties for given todo id.
	 */
	update: function (todoID, data) {
		if (!this._todos[todoID]) {
			console.debug("[Todolist.Todo.UpdateHandler] Unknown todo id " + todoID);
			return;
		}
		
		for (var $property in data) {
			this._updateProperty(todoID, $property, data[$property]);
		}
	},
	
	/**
	 * Wrapper for property updating.
	 */
	_updateProperty: function (todoID, property, value) {
		switch (property) {
			case 'deleted':
				this._delete(todoID, value);
				break;
				
			case 'isDone':
				if (value) {
					this._markAsDone(todoID);
				}
				else {
					this._markAsUndone(todoID);
				}
				break;
				
			default:
				this._handleCustomProperty(todoID, property, value);
				break;
		}
	},
	
	/**
	 * Handles custom properties not known
	 */
	_handleCustomProperty: function (todoID, property, value) {
		this._todos[todoID].trigger('todoUpdateHandlerProperty', [todoID, property, value]);
	},
	
	/**
	 * Deletes an todo.
	 */
	_delete: function (todoID, link) {
	},
	/**
	 * Sets an todo as featured.
	 */
	_markAsDone: function (todoID) {
		this._todos[todoID].data('done', 1);
		$('.jsMarkAsDone .icon').addClass('fa-check-square-o');
		$('.jsMarkAsDone .icon').removeClass('fa-square-o');
		$('.jsMarkAsDone .doneTitle').text(WCF.Language.get('todolist.general.done'));
	},
	
	/**
	 * Unsets as todo as featured.
	 */
	_markAsUndone: function (todoID) {
		this._todos[todoID].data('done', 0);
		$('.jsMarkAsDone .icon').removeClass('fa-check-square-o');
		$('.jsMarkAsDone .icon').addClass('fa-square-o');
		$('.jsMarkAsDone .doneTitle').text(WCF.Language.get('todolist.general.undone'));
	},
	
	/**
	 * Returns generic property values for an todo.
	 */
	getValue: function (todoID, property) {
		if (!this._todos[todoID]) {
			console.debug("[Todolist.Todo.UpdateHandler] Unknown todo id " + todoID);
			return;
		}
		
		switch (property) {
			case 'isDone':
				return this._todos[todoID].data('done');
				break;
		}
	}
});

/**
 * Todo update handler for todo page.
 */
 Todolist.Todo.UpdateHandler.Todo = Todolist.Todo.UpdateHandler.extend({
	/**
	 * @see Todolist.Todo.UpdateHandler._delete()
	 */
	_delete: function (todoID, link) {
		new WCF.PeriodicalExecuter(function (pe) {
			pe.stop();
			
			window.location = link;
		}, 1000);
	}
});